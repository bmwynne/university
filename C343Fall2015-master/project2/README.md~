Brandon Wynne


For our FloodIt game, we were asked to develop the flood.py portion, which is the portion that takes in three arguments: the color of the tile, flooded list, and screen size and returns a flooded list. For our flood.py, the algorithm that we developed went through the flooded list and first checked if the coordinate was in the bounds of the screen, if the coordinate was in bounds, we checked if the the tile has the same color of the tile that is surrounding it, if that is also true, and the coordinate is also not currently in the list, then the coordinate is added to the flooded list. To improve the efficiency of this game, we improved our logic statements. Instead of having a triple nested if-structure, we reduced that to one if statement that returns either true or false by combining all of the if-statement boolean expressions. We also realized that it was unncessary to check weather or not the coordinates that are in the flooded list are in bounds after we add it, rather we should check that before it is added, so that was another change that we implemented in our improved code. After analyzing our graph, which displayed results of execution time vs. board size, it was realized that the graph itself had the shape of x^2 or e^x, regardles, it was most definitely an exponential function as expected. This shows that as the board size increases, the execution time exponentially increases, which is expected. We attribute this exponential execution time increase to checking the flooded lists during each iteration several times (up, down, left, and right), as they grow bigger in size while the board size increases and also the if-statement structure that was creating a lengthened decision tree for the logic in the algorithm. 