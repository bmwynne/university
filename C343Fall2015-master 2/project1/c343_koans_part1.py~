from unit_test import *

___ = [] # ignore this line


# Instructons:
#   Fill in the blanks with the most simple answer that makes the
#   tests pass and that does not refer directly to any variables.
#   (But don't fill in blanks on the lines that end in a comment that
#    says to ignore the line. Just skip those.)
#
#   I recommend using www.pythontutor.com to visualize the
#   execution of these programs.
#

#===============================================================================
# Boolean values (True,False) and operations on them
# https://docs.python.org/3.3/library/stdtypes.html (sections 4.1, 4.2, 4.3)
#===============================================================================
test( True )
test( not False )
test( True and (not ___) )
#-------------------------------------------------------------------------------
test( False or ___ )
#-------------------------------------------------------------------------------
test( True == True )
test( True != False )
test( False == ___ )

#===============================================================================
# integer values (..., -2, -1, 0, 1, 2, ...) and operations on them
# https://docs.python.org/3.3/library/stdtypes.html (section 4.4)
#===============================================================================
___ = 0 # ignore this line

#-------------------------------------------------------------------------------
test( 1 + 2 == ___ )
#-------------------------------------------------------------------------------
test( 1 - 2  == ___ )
#-------------------------------------------------------------------------------
test( -(1 + 2) == ___ )
#-------------------------------------------------------------------------------
test( - ___ == 5 )
#-------------------------------------------------------------------------------
test( 6 % 4 == ___ )

#===============================================================================
# variables and assignment
# https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
#===============================================================================
x = 4
test( x == ___ )
#-------------------------------------------------------------------------------
x = 1 + 2
test( x == ___ )
#-------------------------------------------------------------------------------
x = 4
y = 2 + x
test( y == ___ )
#-------------------------------------------------------------------------------
x = 4
x = 5
test( x == ___ )
#-------------------------------------------------------------------------------
x = 7
x = x + 3
test( x == ___ )
#-------------------------------------------------------------------------------
# What is the general rule for the evaluation of an assignment statement?


#===============================================================================
# Tuples (Immutable Arrays)
# https://docs.python.org/3.3/library/stdtypes.html (section 4.6)
#===============================================================================
test( len( (5,1,8) ) == ___ )
#-------------------------------------------------------------------------------
test( len( () ) == ___ )
#-------------------------------------------------------------------------------
t = (7,3,4)
test( t[0] == ___ and t[1] == ___ and t[2] == ___ )
#-------------------------------------------------------------------------------
t = (7,3,4)
test( (t is t) == ___ )
#-------------------------------------------------------------------------------
t = (7,3,4)
t2 = (7,3,4)
test( (t is t2) == ___ )

#===============================================================================
# Arrays (Python Lists)
# https://docs.python.org/3.3/tutorial/introduction.html#lists
# https://docs.python.org/3.3/library/stdtypes.html#lists (section 4.6)
# https://docs.python.org/3.3/tutorial/datastructures.html#more-on-lists
#===============================================================================

test( len([5,1,8,1]) == ___ )
#-------------------------------------------------------------------------------
a = [5,1,8,1]
test( len(a) == ___ )
#-------------------------------------------------------------------------------
test( len([]) == ___ )
#-------------------------------------------------------------------------------
a = [7,3,4]
test( a[0] == ___ and a[1] == ___ and a[2] == ___ )
#-------------------------------------------------------------------------------
test( [7,3,4][0] == ___ )
#-------------------------------------------------------------------------------
a = [7,3,4]
a[0] = 9
test( a[0] == ___ )
test( a[1] == ___ )
#-------------------------------------------------------------------------------
a = [7,3,4]
b = a
b[0] = 10
test( a[0] == ___ and b[0] == ___ )
#-------------------------------------------------------------------------------
a = [7,3,4]
b = [7,3,4]
b[0] = 5
test( a[0] == ___ and b[0] == ___ )
#-------------------------------------------------------------------------------
a = [7,3,4]
b = a
test((a is b) == ___)
#-------------------------------------------------------------------------------
a = [7,3,4]
b = [7,3,4]
test((a is b) == ___)
#-------------------------------------------------------------------------------
a = [7,3,4]
test( ___ in a )
#-------------------------------------------------------------------------------
a = [0,7,3]
test( ___ not in a )
#-------------------------------------------------------------------------------
a = [7,3,4]
total = 0
for x in a:
    total = total + x
test( total == ___ )
#-------------------------------------------------------------------------------
b = []
for y in [1,2,3]:
    b.append(y ** 2)
test( b == ___ )
#-------------------------------------------------------------------------------
test( [1,2] + [3,4] == ___ )
#-------------------------------------------------------------------------------
test( [5,1] + [2] == ___ )
#-------------------------------------------------------------------------------
test( [] + [4,2] == ___ )
#-------------------------------------------------------------------------------
a = [5,1]
a.append(2)
test( a == ___ )
#-------------------------------------------------------------------------------
a = [8,'hi',(3,4)]
test( a[1] == ___ and a[2][0] == ___ and a[2][1] == ___ )
#-------------------------------------------------------------------------------
a = [[5,8]]
b = [a[0]]
a[0][1] = 2
test( b[0][1] == ___ )
#-------------------------------------------------------------------------------
a = [3,1,4,1,5,9]
b = [x * 2 for x in a]
test( b == ___ )
#-------------------------------------------------------------------------------
a = [3,1,4,1,5,9]
b = [x * 2 for x in a if x > 3]
test( b == ___ )
#-------------------------------------------------------------------------------
a = [3,1]
b = [5,9]
c = [(x,y) for x in a for y in b]
test( c == ___ )
#===============================================================================
# Strings
# https://docs.python.org/3.3/library/stdtypes.html (section 4.7)
#===============================================================================

test( len('hello') == ___ )
#-------------------------------------------------------------------------------
test( 'hello'[0] == ___ )
#-------------------------------------------------------------------------------
test( 'hello'[4] == ___ )
#-------------------------------------------------------------------------------
test( 'hello ' + 'world!' == ___ )
#-------------------------------------------------------------------------------
test( ('hello' is 'hello') == ___ )

#===============================================================================
# Dictionaries
# https://docs.python.org/3.3/library/stdtypes.html (section 4.10)
#===============================================================================
test( len({'a': 3, 'b': 2, 'c': 7}) == ___ )
#-------------------------------------------------------------------------------
test( {'a': 3, 'b': 2, 'c': 7} ['b'] == ___ )
#-------------------------------------------------------------------------------
d = {'a': 3, 'b': 2, 'c': 7}
d['b'] = 5
test( d['b'] == ___ )
#-------------------------------------------------------------------------------
d = {}
d['b'] = 5
test( d['b'] == ___ )
#-------------------------------------------------------------------------------
d = {(5,2): 'b'}
d[(3,4)] = 'a'
test( d[(3,4)] == ___ and d[(5,2)] == ___ )
#-------------------------------------------------------------------------------
d = {'a': 1, 'b': 2}
test( d == {'b': ___, 'a': ___ } )
#-------------------------------------------------------------------------------
d = {'hi': 5, 'lo': 1}
test( ___ in d  )
#-------------------------------------------------------------------------------
d = {'a': 3, 'b': 2, 'c': 7}
for (k,v) in d.items():
  test( d[k] == ___ )

#===============================================================================
# Sets
# https://docs.python.org/3.3/library/stdtypes.html (section 4.9)
#===============================================================================
___ = 2 # ignore this line
#-------------------------------------------------------------------------------
test( len(set([5,1,8,1])) == ___ )
#-------------------------------------------------------------------------------
test( len(set()) == ___ )
#-------------------------------------------------------------------------------
test( ___ in set([5,1,8,1]) and ___ not in set([2,0,1]) )
#-------------------------------------------------------------------------------
a = set([1,2,3])
b = set([4,5,6])
test( a.isdisjoint(b) == ___ )
#-------------------------------------------------------------------------------
a = set([1,2,3])
b = set([3,4,5])
c = a | b
test( c == ___ )
#-------------------------------------------------------------------------------
a = set([1,2,3])
b = set([3,4,5])
 # what set operation applied to a and b gives set([3])?
test( ___ == set([3]))
#-------------------------------------------------------------------------------
a = set([5,2])
b = set([4,5,1,2])
test ( (a <= b) == ___ and (b <= a) == ___ )

#===============================================================================
# "if" statements
# https://docs.python.org/3.3/reference/compound_stmts.html#the-if-statement
#===============================================================================
a = 1
if a < 2:
    b = a
    a = 4
test (a == ___ and b == ___ )
#-------------------------------------------------------------------------------
a = 2
if a < 2:
    b = 1 + a
    a = 4
else:
    a = 5
    b = 1 + a
test (a == ___  and b == ___ )
#-------------------------------------------------------------------------------
a = 3
if a < 2:
   b = 5
elif a < 4:
   b = 6
else:
   b = 7
test( a == ___ and b == ___ )
#===============================================================================
# Loops
# https://docs.python.org/3/reference/compound_stmts.html#the-while-statement
# https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
#===============================================================================
i = 0
n = 3
r = 0
while i < n:
    r += i
    i = i + 1
test( r - (n * (n - 1)) / 2 == ___ )
#-------------------------------------------------------------------------------
r = 0
for i in range(0,3):
    r += i
test( r == ___ )
#-------------------------------------------------------------------------------
a = [3,1,4,1,5,9]
x = 5
for i in range(0,len(a)):
    if x == a[i]:
        j = i
        break
test( a[j] == ___ and j == ___ ) 
#===============================================================================
# Functions
# https://docs.python.org/3/reference/compound_stmts.html#function-definitions
# https://docs.python.org/3/reference/expressions.html#calls
# https://docs.python.org/3/reference/expressions.html#lambda
#===============================================================================
def double(x):
    return x * 2
test( double(3) == ___ )
#-------------------------------------------------------------------------------
def double(x):
    return x + x
def quadruple(x):
    return double(x) + double(x)
test( quadruple(3) == ___ )
#-------------------------------------------------------------------------------
from math import sqrt
def distance(p, q):
    return sqrt((q[0] - p[0]) ** 2 + (q[1] - p[1]) ** 2)
test( distance( (0,0), (0,1) ) == ___ )
#-------------------------------------------------------------------------------
def factorial(n):
    if n == 1:
        return 1
    else:
        r = factorial(n-1)
        return n * r
test( factorial(3) == ___ )
#-------------------------------------------------------------------------------
a = (lambda x: x * 2)(3)
test( a == ___ )
#-------------------------------------------------------------------------------
a = 3
def f(x):
    return x + a
b = f(5)
test( b == ___ )
#-------------------------------------------------------------------------------
a = 3
def f(x):
    return x + a
a = 4
b = f(5)
test( b == ___ )
#-------------------------------------------------------------------------------
a = 3
def f(x):
    a = 2
    return x + a
b = f(5) + a
test( b == ___ )
#-------------------------------------------------------------------------------
a = 3
def f(x):
    global a
    a = 2
    return x + a
b = f(5) + a
test( b == ___ )
#-------------------------------------------------------------------------------
def f(x):
    return x + 2
f = lambda y: y
test( f(3) == ___ )
#-------------------------------------------------------------------------------
def f(a):
    a = 42
b = 1
f(b)
test( b == ___ )
#-------------------------------------------------------------------------------
def f(a):
    a[0] = 42
b = [1]
f(b)
test( b[0] == ___ )
